geom_bar(stat = 'identity',
position = 'dodge',
col=1) + scale_fill_manual(values=c("#A9A9A9", "#FFFAF0"))+
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+
#geom_point() +
#geom_text(x=3, y=3, label="*")+
facet_wrap(~Métrica, scales = 'free')+
geom_errorbar(aes(x=Momento,
ymin=Min, ymax=(runif(12)+1)),
width=0.4,
colour="orange",
alpha=0.9,
size=1.3,
position = position_dodge(0.9))
ggplot(table4_plot, aes(x=Momento,
y=Predito,
fill = Group))+
theme_bw() +
geom_bar(stat = 'identity',
position = 'dodge',
col=1) + scale_fill_manual(values=c("#A9A9A9", "#FFFAF0"))+
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+
#geom_point() +
#geom_text(x=3, y=3, label="*")+
facet_wrap(~Métrica, scales = 'free')+
geom_errorbar(aes(x=Momento,
ymin=Min, ymax=Max),
width=0.4,
colour="orange",
alpha=0.9,
size=1.3,
position = position_dodge(0.9))
table4_plot
table4_plot
ggplot(table4_plot, aes(x=Momento,
y=Predito,
fill = Group))+
theme_bw() +
geom_bar(stat = 'identity',
position = 'dodge',
col=1) + scale_fill_manual(values=c("#A9A9A9", "#FFFAF0"))+
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+
#geom_point() +
#geom_text(x=3, y=3, label="*")+
facet_wrap(~Métrica, scales = 'free')+
geom_errorbar(aes(x=Momento,
ymin=Min, ymax=Max),
width=0.4,
#colour="orange",
alpha=0.9,
#size=1.3,
position = position_dodge(0.9))
summary_yale2 <- round(as.data.frame(summary(mod_yale_ZIP2))[1:6,],3)
summary_ecap2 <- round(as.data.frame(summary(mod_ecap_ZINBI2))[1:6,],3)
summary_yale2 <- round(as.data.frame(summary(mod_yale_ZIP2))[1:6,],3)
summary_ecap2 <- round(as.data.frame(summary(mod_ecap_ZINBI2))[1:6,],3)
summary_yale2$ic_min <- summary_yale2$Estimate - (1.96*summary_yale2$`Std. Error`)
summary_yale2$ic_max <- summary_yale2$Estimate + (1.96*summary_yale2$`Std. Error`)
summary_ecap2$ic_min <- summary_ecap2$Estimate - (1.96*summary_ecap2$`Std. Error`)
summary_ecap2$ic_max <- summary_ecap2$Estimate + (1.96*summary_ecap2$`Std. Error`)
plot(summary_yale2$Estimate)
points(summary_yale2$ic_min)
points(summary_yale2$ic_max)
plot(summary_yale2$Estimate, ylim = c(-2,2))
points(summary_yale2$ic_min, col=2)
points(summary_yale2$ic_max, col=2)
plot(summary_ecap2$Estimate, ylim = c(-2,2))
points(summary_ecap2$ic_min, col=2)
points(summary_ecap2$ic_max, col=2)
plot(summary_ecap2$Estimate, ylim = c(-4,4))
points(summary_ecap2$ic_min, col=2)
points(summary_ecap2$ic_max, col=2)
summary_yale2$Estimate[1] +
summary_yale2$Estimate[2]*I(Momento==levels(dados4$momento)[2])+
summary_yale2$Estimate[3]*I(Momento==levels(dados4$momento)[3])+
summary_yale2$Estimate[4]*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$Estimate[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$Estimate[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
#---------------------------------------------------------------
# Controle de vícios e compulsões em bariátricos
# através de probióticos
#---------------------------------------------------------------
# Modelos
## Yale e Ecap em função de momento, grupo, idade, altura, peso e imc
## Inclusão de um efeito aleatório para incorporar as correlações das
## medidas provenientes de um mesmo indivíduo
#---------------------------------------------------------------
library(tidyverse)
library(gamlss)
source('~/Dropbox/Aulas-Acessorias/10 Ligia Carlos/2 R/0_funcoes.R')
#---------------------------------------------------------------
# Dados
dados <- read.csv2("~/Dropbox/Aulas-Acessorias/10 Ligia Carlos/0 dados/dados.csv", sep = ',')
#---------------------------------------------------------------
# Variáveis
# id - identificador de paciente
# iniciais - iniciais do paciente
# grupo - placebo ou tratamento (probiótico)
# idade - idade em anos
# sexo - masculino ou feminino
# fumo - sim ou nao
# alcool - sim ou nao
# altura - altura em metros
# peso1 - peso momento 1
# peso3 - peso momento 3
# peso4 - peso momento 4
# imc1 - imc momento 1
# imc3 - imc momento 3
# imc4 - imc momento 4
# yale1 - número de sintomas referentes a vício alimentar momento 1
# yale3 - número de sintomas referentes a vício alimentar momento 3
# yale4 - número de sintomas referentes a vício alimentar momento 4
# ecomp1 - escala de compulsão momento 1
# ecomp3 - escala de compulsão momento 3
# ecomp4 -escala de compulsão momento 4
#---------------------------------------------------------------
# Retirando linhas com dados ausentes
dados2 <- na.omit(dados)
#---------------------------------------------------------------
# Diferença número de linhas
# nrow(dados) - nrow(dados2)
#---------------------------------------------------------------
# Tratamento para formato longo
imc <- dados %>% gather(key = 'momento_imc',
value = 'imc', imc1:imc4)
imc <- imc[,c(1,18,19)]
imc$chave <- 1:nrow(imc)
yale <- dados %>% gather(key = 'momento_yale',
value = 'yale', yale1:yale4)
yale <- yale[,c(1,18,19)]
yale$chave <- 1:nrow(yale)
ecap <- dados %>% gather(key = 'momento_ecap',
value = 'ecap', ecap1:ecap4)
ecap <- ecap[,c(1,18,19)]
ecap$chave <- 1:nrow(ecap)
dados3 <- dados %>% gather(key = 'momento',
value = 'peso', peso1:peso4)
dados3 <- dados3[,c(1,2,3,4,5,6,7,8,18,19)]
dados3$chave <- 1:nrow(dados3)
dados3 <- left_join(dados3, imc)
dados3 <- left_join(dados3, yale)
dados3 <- left_join(dados3, ecap)
#dados3[,c(9,12,14,16)]
dados3$momento <- as.factor(dados3$momento)
levels(dados3$momento) <- c('Pré op.','90 dias','365 dias')
dados3 <- dados3[,-c(12,14,16)]
#names(dados3)
dados4 <- na.omit(dados3)
## Preditor
pred_yale2 <- yale ~ momento + grupo + momento:grupo + re(random=~1|id)
## Modelo
mod_yale_ZIP2 <- gamlss(formula = pred_yale2,
family = ZIP(),
data = dados4,
method = RS())
## Modelo Ecap ZINBI
#summary(mod_ecap_ZINBI)
## Preditor
pred_ecap2 <- ecap ~ momento + grupo + momento:grupo + re(random=~1|id)
## Modelo
mod_ecap_ZINBI2 <- gamlss(formula = pred_ecap2,
family = ZINBI(),
data = dados4,
method = RS())
summary_yale2 <- round(as.data.frame(summary(mod_yale_ZIP2))[1:6,],3)
summary_ecap2 <- round(as.data.frame(summary(mod_ecap_ZINBI2))[1:6,],3)
summary_yale2$ic_min <- summary_yale2$Estimate - (1.96*summary_yale2$`Std. Error`)
summary_yale2$ic_max <- summary_yale2$Estimate + (1.96*summary_yale2$`Std. Error`)
summary_ecap2$ic_min <- summary_ecap2$Estimate - (1.96*summary_ecap2$`Std. Error`)
summary_ecap2$ic_max <- summary_ecap2$Estimate + (1.96*summary_ecap2$`Std. Error`)
table4 <- expand.grid(Grupo=levels(dados4$grupo),
Momento=levels(dados4$momento))
attach(table4)
## Central
table4$lin_pred_yale <-
summary_yale2$Estimate[1] +
summary_yale2$Estimate[2]*I(Momento==levels(dados4$momento)[2])+
summary_yale2$Estimate[3]*I(Momento==levels(dados4$momento)[3])+
summary_yale2$Estimate[4]*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$Estimate[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$Estimate[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_yale <- round(exp(table4$lin_pred_yale),2)
table4$lin_pred_yale <- round(table4$lin_pred_yale,2)
table4$lin_pred_yale_min <-
summary_yale2$ic_min[1] +
summary_yale2$ic_min[2]*I(Momento==levels(dados4$momento)[2])+
summary_yale2$ic_min[3]*I(Momento==levels(dados4$momento)[3])+
summary_yale2$ic_min[4]*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$ic_min[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$ic_min[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_yale_min <- round(exp(table4$lin_pred_yale_min),2)
table4$lin_pred_yale_min <- round(table4$lin_pred_yale_min,2)
table4$lin_pred_yale_max <-
summary_yale2$ic_max[1] +
summary_yale2$ic_max[2]*I(Momento==levels(dados4$momento)[2])+
summary_yale2$ic_max[3]*I(Momento==levels(dados4$momento)[3])+
summary_yale2$ic_max[4]*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$ic_max[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
summary_yale2$ic_max[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_yale_max <- round(exp(table4$lin_pred_yale_max),2)
table4$lin_pred_yale_max <- round(table4$lin_pred_yale_max,2)
## Central
table4$lin_pred_ecap <-
summary_ecap2$Estimate[1] +
summary_ecap2$Estimate[2]*I(Momento==levels(dados4$momento)[2])+
summary_ecap2$Estimate[3]*I(Momento==levels(dados4$momento)[3])+
summary_ecap2$Estimate[4]*I(Grupo==levels(dados4$grupo)[2])+
summary_ecap2$Estimate[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
summary_ecap2$Estimate[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_ecap <- round(exp(table4$lin_pred_ecap),2)
table4$lin_pred_ecap <- round(table4$lin_pred_ecap,2)
table4$lin_pred_ecap_min <-
summary_ecap2$ic_min[1] +
summary_ecap2$ic_min[2]*I(Momento==levels(dados4$momento)[2])+
summary_ecap2$ic_min[3]*I(Momento==levels(dados4$momento)[3])+
summary_ecap2$ic_min[4]*I(Grupo==levels(dados4$grupo)[2])+
summary_ecap2$ic_min[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
summary_ecap2$ic_min[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_ecap_min <- round(exp(table4$lin_pred_ecap_min),2)
table4$lin_pred_ecap_min <- round(table4$lin_pred_ecap_min,2)
table4$lin_pred_ecap_max <-
summary_ecap2$ic_max[1] +
summary_ecap2$ic_max[2]*I(Momento==levels(dados4$momento)[2])+
summary_ecap2$ic_max[3]*I(Momento==levels(dados4$momento)[3])+
summary_ecap2$ic_max[4]*I(Grupo==levels(dados4$grupo)[2])+
summary_ecap2$ic_max[5]*I(Momento==levels(dados4$momento)[2])*I(Grupo==levels(dados4$grupo)[2])+
summary_ecap2$ic_max[6]*I(Momento==levels(dados4$momento)[3])*I(Grupo==levels(dados4$grupo)[2])
table4$mean_pred_ecap_max <- round(exp(table4$lin_pred_ecap_max),2)
table4$lin_pred_ecap_max <- round(table4$lin_pred_ecap_max,2)
detach(table4)
names(table4)
tabela <- table4[,c(1,2,4,6,8,10,12,14)]
names(tabela) <- c('Grupo', 'Momento',
'Yale predito', 'Yale minimo', 'Yale maximo',
'Ecap predito', 'Ecap minimo', 'Ecap maximo')
table4_plot <- data.frame(Grupo = rep(table4$Grupo,2),
Momento = rep(table4$Momento,2),
Métrica = c(rep('Yale',6),
rep('Ecap',6)),
Predito = c(table4$mean_pred_yale,
table4$mean_pred_ecap),
Min = c(table4$mean_pred_yale_min,
table4$mean_pred_ecap_min),
Max= c(table4$mean_pred_yale_max,
table4$mean_pred_ecap_max))
levels(table4_plot$Grupo) <- c('Placebo', 'Probiotic')
levels(table4_plot$Momento) <- c('Pre-Surgical',
'3 months post-surgical',
'1 year post-surgical')
names(table4_plot)[1] <- 'Group'
table4_plot$Métrica <- factor(as.vector(table4_plot$Métrica), levels = c('Yale', 'Ecap'))
x11()
ggplot(table4_plot, aes(x=Momento,
y=Predito,
fill = Group))+
theme_bw() +
geom_bar(stat = 'identity',
position = 'dodge',
col=1) + scale_fill_manual(values=c("#A9A9A9", "#FFFAF0"))+
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+
#geom_point() +
#geom_text(x=3, y=3, label="*")+
facet_wrap(~Métrica, scales = 'free')+
geom_errorbar(aes(x=Momento,
ymin=Min, ymax=Max),
width=0.4,
#colour="orange",
alpha=0.9,
#size=1.3,
position = position_dodge(0.9))
ggplot(table4_plot, aes(x=Momento,
y=Predito,
group = Group))+
theme_bw() +
geom_line(aes(group=Group, linetype=Group)) +
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+ geom_point() +
geom_text(x=3, y=3, label="Scatter plot")+
facet_wrap(~Métrica, scales = 'free')
a<-ggplot(subset(table4_plot, Métrica == 'Yale'),
aes(x=Momento,
y=Predito,
group = Group))+
theme_bw() +
geom_line(aes(group=Group, linetype=Group)) +
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+ geom_point()+
geom_text(x=3, y=1.5, label="*",
size = 5)+
facet_wrap(~Métrica, scales = 'free')
b<-ggplot(subset(table4_plot, Métrica == 'Ecap'),
aes(x=Momento,
y=Predito,
group = Group))+
theme_bw() +
geom_line(aes(group=Group, linetype=Group)) +
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+ geom_point() +
geom_text(x=3, y=8, label="*",
size = 5)+
facet_wrap(~Métrica, scales = 'free')
ggpubr::ggarrange(a,b, common.legend = T)
ggplot(table4_plot, aes(x=Momento,
y=Predito,
fill = Group))+
theme_bw() +
geom_bar(stat = 'identity',
position = 'dodge',
col=1) + scale_fill_manual(values=c("#A9A9A9", "#FFFAF0"))+
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+
#geom_point() +
#geom_text(x=3, y=3, label="*")+
facet_wrap(~Métrica, scales = 'free')+
geom_errorbar(aes(x=Momento,
ymin=runif(12), ymax=(runif(12)+1)),
width=0.4,
colour="orange",
alpha=0.9,
size=1.3,
position = position_dodge(0.9))
ggplot(table4_plot, aes(x=Momento,
y=Predito,
fill = Group))+
theme_bw() +
geom_bar(stat = 'identity',
position = 'dodge',
col=1) + scale_fill_manual(values=c("#A9A9A9", "#FFFAF0"))+
theme(legend.position = 'top') +
#labs(title = "Ecap")+
xlab('Experimental moment') +
ylab('Estimate')+
#geom_point() +
#geom_text(x=3, y=3, label="*")+
facet_wrap(~Métrica, scales = 'free')+
geom_errorbar(aes(x=Momento,
ymin=Min, ymax=Max),
width=0.4,
#colour="orange",
alpha=0.9,
#size=1.3,
position = position_dodge(0.9))
setwd("~/mepc2021")
library(tidyverse)
library(plyr)
library(pander)
library(ggpubr)
library(splitstackshape, quietly = TRUE)
library(lubridate)
library(GGally)
library(ggmosaic)
## TABELAS
#-----------------------------------------------------------------
### Tabela de frequencia simples não ordenada
freq_n_ord <- function(vetor){
fa <- table(vetor) # frequência absoluta
fr <- prop.table(fa) # frequência relativa
table <- data.frame(Niveis = names(fa),
Frequencia = as.vector(fa),
`Frequencia relativa` = as.vector(fr)) # unindo
table
}
#-----------------------------------------------------------------
### Tabela de frequencia simples ordenada
freq_ord <- function(vetor){
fa <- table(vetor) # frequência absoluta
fr <- prop.table(fa) # frequência relativa
table <- data.frame(Niveis = names(fa),
Frequencia = as.vector(fa),
`Frequencia relativa` = as.vector(fr)) # unindo
table <- arrange(table, desc(table$Frequencia))
table
}
#-----------------------------------------------------------------
### Tabela por classes
tab_classes <- function(vetor){
h <- hist(vetor, plot = FALSE) #histograma
breaks <- h$breaks #armazenando os breaks do histograma
classes <- cut(vetor, breaks = breaks,
include.lowest = TRUE, right = TRUE) #gerando classes
table <- as.data.frame(table(classes)) #gerando tabela com faixas
table$fr <- prop.table(table$Freq)
names(table) <- c('Classes', 'Frequencia', 'Frequencia relativa')
table
}
#-----------------------------------------------------------------
### Medidas de posição
posicao <- function(vetor){
table <- data.frame(Minimo = quantile(vetor)[1],
Quartil_1 = quantile(vetor)[2],
Media = mean(vetor),
Mediana = quantile(vetor)[3],
Quartil_3 = quantile(vetor)[4],
Maximo = quantile(vetor)[5])
row.names(table) <- NULL
table
}
#-----------------------------------------------------------------
### Medidas de dispersao
dispersao <- function(vetor){
table <- data.frame(Amplitude = diff(range(vetor)),
Variancia = var(vetor),
Desvio_padrao = sd(vetor)#,
#Coef_variacao = 100*sd(vetor)/mean(vetor)
)
table
}
#-----------------------------------------------------------------
# Caminho
path <- "./Questionário-MEPC-2021 (respostas) - Respostas ao formulário 1.csv"
##################################################################
##################################################################
# Leitura e tratamento dos dados do questionário
##################################################################
# Caminho
#path <- "./teste.csv"
path <- "./Questionário-MEPC-2021 (respostas) - Respostas ao formulário 1.csv"
##################################################################
# Leitura dados 2021
quest_21 <- read.csv(path, sep = ',', encoding = 'UTF-8', header = T)
# Nome das colunas
names(quest_21) <-
c('data_hora', 'instituicao', 'setor_ufpr', 'atividade_ies',
'area_conhec', 'fim_grad', 'inst_grad', 'programas_grad', 'inicio_msc',
'final_msc', 'inst_msc', 'artigos', 'bolsa', 'materias_est',
'materias_n_est', 'software_sn', 'software_list', 'met_est',
'import_met_est', 'expectativa_pos_pg', 'conhec_trans', 'youtube',
'contat_coord', 'contat_colab', 'ensino_medio1', 'ensino_medio2',
'sexo', 'altura', 'peso', 'nascimento', 'emprego', 'residencia',
'irmaos', 'origem', 'cnh', 'transporte', 'tempo_ies', 'app_transporte',
'pet', 'instrumento', 'redes_sociais', 'atv_fisica_reg', 'atv_fisica_n',
'atv_fisica_qual', 'covid_positivo', 'covid_conhecido',
'covid_gr_risco_me', 'covid_gr_risco_outro', 'covid_vacina',
'medidas_eficazes', 'medidas_seguidas', 'covid_renda', 'covid_estudos',
'covid_aprendizado', 'covid_ere', 'dificuldade_ere', 'covid_conclusao', 'descartada',
'idade_foto', 'kiki_bouba', 'quadrados')
quest_21 <- quest_21[4:nrow(quest_21),]
##################################################################
# Leitura dados 2020
path <- "./resp_mpec2020 - Respostas ao formulário 1.csv"
quest_20 <- read.csv(path, sep = ',', encoding = 'UTF-8')
#quest <- read.csv(path, sep = ',', encoding = 'latin1')
# Excluindo a primeira coluna referente aos carimbos de data e hora do google forms
quest_20 <- quest_20[,-1]
# Classificacao das variaves
# lo/ln - var qualitativa ordinal, nominal
# td - var quantitativa discreta
# Renomeando as colunas
names(quest_20) <-
c(
# questoes academicas
"ln_instituicao", "ln_setorAtuacao", "lo_ativAtuacao",
"ln_setorArea", "tc_anoFimGrad", "ln_localGrad",
"ln_progGrad", "tc_inicMest", "tc_fimMest",
"ln_localMest", "td_artigo", "ln_bolsaEstudo",
"td_estatGrad", "td_estatPGrad", "lo_soft",
"ln_enumSoft", "lo_importancia", "td_notaImport",
"ln_expectAposPG", "ln_conhecTransv", "lo_videoTransv",
"ln_turma", "lo_contatoProfDisc", "lo_contatoProfColabDisc",
"ln_medio1", "ln_medio2",
# perfil do aluno
"ln_sexo", "tc_altura", "tc_peso",
"dataNasc", "ln_tipoTrab", "ln_compMoradia",
"td_numIrmao", "ln_origem", "ln_tipoHab",
"ln_tipoTransp", "tc_tempoPUniv", "td_qtddServTransp",
"ln_pet", "ln_instr","ln_rede",
#questoes extra
"tc_idadeProf", "ln_kiki"
)
##################################################################
# Leitura dados 2019
path <- "./resp_2019.csv"
quest_19 <- read.csv(path, sep = ',', encoding = 'UTF-8')
quest_19 <- data.frame(quest_19[,-1], stringsAsFactors = FALSE)
names(quest_19) <- c("lo_ativAtuacao", "ln_setorAtuacao",
"tc_anoFimGrad", "ln_localGrad",
"ln_progGrad", "tc_inicMest", "tc_fimMest",
"ln_localMest", "td_artigo", "ln_bolsaEstudo",
"td_estatGrad", "td_estatPGrad", "lo_soft",
"ln_enumSoft", "lo_importancia", "td_notaImport",
"ln_tipoTrab", "ln_sexo", "td_numIrmao",
"ln_origem", "ln_compMoradia", "ln_tipoTransp",
"ln_tipoHab", "tc_tempoPUniv", "tc_altura",
"tc_peso", "ln_pet", "ln_instr", "dataNasc",
"ln_rede", "td_qtddServTransp", "lo_provNetflix",
"ln_arrozNatal", "tc_idadeProf", "ln_expectAposPG",
"ln_conhecTransv", "lo_videoTransv",
"lo_contatoProfDisc", "lo_contatoProfColabDisc")
##################################################################
rmarkdown::render_site()
560*0.1
560+56
